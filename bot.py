import asyncio
import random

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command


TOKEN = '8199451521:AAG354ucQXPC-B4OWerDSDvbBekL4nfpknk'

bot = Bot(token=TOKEN)
dp = Dispatcher()

compliments = [
    "–Ø –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–¥ —á—Ç–æ —É–∑–Ω–∞–ª —Ç–µ–±—è, –∏ —Ç—ã —É –º–µ–Ω—è –µ—Å—Ç—åü•∫",
    "–ë–µ–∑—É–º–Ω–æ –ª—é–±–ª—é —Ç–≤–æ—é —É–ª—ã–±–∫—É, –∏ —Å–º–µ—Ö‚ò∫Ô∏è",
    "–¢—ã —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ, –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –∏–∑–≥–∏–±ü•∞",
]

keyboard_start = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Start")],
    ],
    resize_keyboard=True
)

keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíñ –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç"), KeyboardButton(text="üòë –ü–æ–¥–≤–æ—Ö?"), KeyboardButton(text="üòè –ñ–æ–ø–∫–∞")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Start"
@dp.message(lambda message: message.text == "Start")
async def start_button_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç –º–∏–ª–∞—è, —Ö–æ—á—É —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–∞–∂–º–∏ —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏ ‚ù§Ô∏è", reply_markup=keyboard_main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞
@dp.message(lambda message: message.text == "üíñ –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç")
async def compliment_handler(message: types.Message):
    compliment = random.choice(compliments)
    await message.answer(compliment, reply_markup=keyboard_main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ–¥–≤–æ—Ö?"
@dp.message(lambda message: message.text == "üòë –ü–æ–¥–≤–æ—Ö?")
async def podvoh_handler(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –∏ –Ω–µ –¥–∞–º —Ç–µ–±—è –æ–±–∏–∂–∞—Ç—å, –∞ —Ç–æ —Ç–µ–ø–ª–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –∫ —Ç–µ–±–µ, –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–Ω–µ—Ç—Å—è, –∏ —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ç–µ–±—è —Ü–µ–Ω–∏—Ç—å –∏ –ª—é–±–∏—Ç—å ‚ù§Ô∏è", reply_markup=keyboard_main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ñ–æ–ø–∫–∞"
@dp.message(lambda message: message.text == "üòè –ñ–æ–ø–∫–∞")
async def zhopka_handler(message: types.Message):
    await message.answer("–¢—ã –º–æ—è –ª—é–±–∏–º–∞—è –∂–æ–ø–∫–∞ üôÉ", reply_markup=keyboard_main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª Start)
@dp.message(Command('start'))
async def start_message_handler(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ Start", reply_markup=keyboard_start)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
